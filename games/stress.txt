Name: Stress
Turn-based: no

Number of players: 4
Player hand size: 4
Player collections: 3
p0:
    name: Player1
p1:
    name: Player2
p2:
    name: Player3
p3:
    name: Player4

Number of piles: 16
pile0:
    name: P1hand1
    facedown: no
    size: 4
    owner: Player1
pile1:
    name: P1hand2
    facedown: no
    size: 4
    owner: Player1
pile2:
    name: P1hand3
    facedown: no
    size: 4
    owner: Player1
pile3:
    name: P2hand1
    facedown: no
    size: 4
    owner: Player2
pile4:
    name: P2hand2
    facedown: no
    size: 4
    owner: Player2
pile5:
    name: P2hand3
    facedown: no
    size: 4
    owner: Player2
pile6:
    name: P3hand1
    facedown: no
    size: 4
    owner: Player3
pile7:
    name: P3hand2
    facedown: no
    size: 4
    owner: Player3
pile8:
    name: P3hand3
    facedown: no
    size: 4
    owner: Player3
pile9:
    name: P4hand1
    facedown: no
    size: 4
    owner: Player4
pile10:
    name: P4hand2
    facedown: no
    size: 4
    owner: Player4
pile11:
    name: P4hand3
    facedown: no
    size: 4
    owner: Player4  
pile12:
    name: discard1
    facedown: no
    size: 1
    owner: all  
pile13:
    name: discard2
    facedown: no
    size: 1
    owner: all 
pile14:
    name: discard3
    facedown: no
    size: 1
    owner: all 
pile15:
    name: discard4
    facedown: no
    size: 1
    owner: all       



Number of rules: 
rule0: 
    name: validDiscard
    expr: always

rule0:
    name: valuesWithinOne
    expr: (val1 is val2 + 1) or (val1 is val2 - 1)
    let: None

rule1:
    name: valuesWrapAround
    expr: (val1 is 1 and val2 is 13) or (val1 is 13 and val2 is 1)
    let: None

rule2:
    name: validDiscard
    expr: valuesWithinOne or valuesWrapAround
    let: val1 = card.value; val2 = pile.top_card.value

rule3:
    name: validDiscardPile1
    expr: validDiscard
    let: pile = discard1
    
rule4:
    name: validDiscardPile2
    expr: validDiscard
    let: pile = discard2

rule5:
    name: canDiscard
    expr: any (validDiscardPile1 or validDiscardPile2)
    let: card <- player.hand.cards

rule6:
    name: validDraw
    expr: (player.hand.size < 5) and (pile.size > 0)
    let: None

rule7:
    name: validDrawPlayer1
    expr: validDraw
    let: player = Player1; pile = draw1

rule8:
    name: validDrawPlayer2
    expr: validDraw
    let: player = Player2; pile = draw2

rule9:
    name: someoneCanPlay
    expr: any (canDiscard or (validDrawPlayer1 or validDrawPlayer2))
    let: player <- players

rule10:
    name: noneCanPlay
    expr: not someoneCanPlay
    let: None

rule11:
    name: replacePilesSameSize
    expr: replace1.size is replace2.size
    let: None

rule12:
    name: validReplacement
    expr: noneCanPlay or (not replacePilesSameSize)
    let: None

Number of moves: 8
move0:
    where: all
    from: Player1's hand
    to: discard1
    trigger: q
    how: validDiscardPile1
    let: None
move1:
    where: all
    from: Player1's hand
    to: discard2
    trigger: w
    how: validDiscardPile2
    let: None
move2:
    where: top
    from: draw1
    to: Player1's hand
    trigger: e
    how: validDrawPlayer1
    let: None
move3:
    where: all
    from: Player2's hand
    to: discard1
    trigger: i
    how: validDiscardPile1
    let: None
move4:
    where: all
    from: Player2's hand
    to: discard2
    trigger: o
    how: validDiscardPile2
    let: None
move5:
    where: top
    from: draw2
    to: Player2's hand
    trigger: p
    how: validDrawPlayer2
    let: pile = draw2
move6:
    where: bottom
    from: replace1
    to: discard1
    trigger: b
    how: validReplacement
    let: None
move7:
    where: bottom
    from: replace2
    to: discard2
    trigger: b
    how: validReplacement
    let: None

Number of events: 1
event0:
    trigger: replace1.size is 0
    action: (replenish replace1 discard1 5), (replenish replace2 discard2 5)

Win condition: (Player1.hand.size is 0 and draw1.size is 0) or (Player2.hand.size is 0 and draw2.size is 0)

