Name: Speed
Turn-based: no

Number of players: 2
Player hand size: 5
Player collections: 3
Player1
Player2

Number of piles: 6
draw1:
    facedown: yes
    size: 15
    owner: Player1
draw2:
    facedown: yes
    size: 15
    owner: Player2
replace1:
    facedown: yes
    size: 5
    owner: all
replace2:
    facedown: yes
    size: 5
    owner: all
discard1:
    facedown: no
    size: 1
    owner: all
discard2:
    facedown: no
    size: 1
    owner: all

Number of rules: 8
validDiscardPlusMinusOne:
    expr: (card.value = move.end.value + 1) or (card.value = move.end.value - 1)
validDiscardWrapAround:
    expr: (card.value = 1 and move.end.value = 13) or (card.value = 13 and move.end.value = 1)
validDiscard:
    expr: (card.value = move.end.value + 1) or (card.value = move.end.value - 1) or (card.value = 1 and move.end.value = 13) or (card.value = 13 and move.end.value = 1)
validDraw:
    expr: (move.start.size > 0) and (move.end.size < 5)
player1NeedsReplace:
    expr: not(Fn.rules.validDiscard Player1.hand discard1 or Fn.rules.validDiscard Player1.hand discard2)
player2NeedsReplace:
    expr: not(Fn.rules.validDiscard Player2.hand discard1 or Fn.rules.validDiscard Player2.hand discard2)
replacePilesSameSize:
    expr: replace1.size = replace2.size
validReplacement:
    expr: (not((Fn.rules.validDiscard discard1 Player1.hand or Fn.rules.validDiscard discard2 Player1.hand) or (Fn.rules.validDiscard discard1 Player2.hand or Fn.rules.validDiscard discard2 Player2.hand))) and (Player1.hand.size = 5 or draw1.size = 0) and (Player2.hand.size = 5 or draw2.size = 0)

Number of moves: 8
q:
    where: all
    from: Player1.hand
    to: discard1
    when: q
    how: validDiscard
w:
    where: all
    from: Player1.hand
    to: discard2
    when: w
    how: validDiscard
e:
    where: top
    from: draw1
    to: Player1.hand
    when: e
    how: validDraw
i:
    where: all
    from: Player2.hand
    to: discard1
    when: i
    how: validDiscard
o:
    where: all
    from: Player2.hand
    to: discard2
    when: o
    how: validDiscard
p:
    where: top
    from: draw2
    to: Player2.hand
    when: p
    how: validDraw
b:
    where: bottom
    from: replace1
    to: discard1
    when: b
    how: validReplacement
b:
    where: bottom
    from: replace2
    to: discard2
    when: b
    how: validReplacement

Number of events: 1
replacePilesEmpty:
    trigger: replace1.size = 0
    action: (Fn.replace1.replenish discard1 5) (Fn.replace2.replenish discard2 5)

Win condition: (Player1.hand.size = 0) or (Player2.hand.size = 0)
